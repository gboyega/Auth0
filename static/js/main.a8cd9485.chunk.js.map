{"version":3,"sources":["react-auth0-spa.js","components/NavBar.js","components/Profile.js","components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","isAuthenticated","loginWithRedirect","logout","onClick","to","Profile","loading","user","src","picture","alt","name","email","JSON","stringify","PrivateRoute","Component","component","path","rest","useEffect","a","appState","targetUrl","fn","render","props","App","className","exact","Boolean","hostname","match","ReactDOM","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yWAGMA,EAA4B,kBAC9BC,OAAOC,QAAQC,aAAa,GAAIC,SAASC,MAAOJ,OAAOK,SAASC,WAEvDC,EAAeC,IAAMC,gBACrBC,EAAW,kBAAMC,qBAAWJ,I,OCwB1BK,EA3BA,WAAO,IAAD,EACsCF,IAA/CG,EADS,EACTA,gBAAiBC,EADR,EACQA,kBAAmBC,EAD3B,EAC2BA,OAE5C,OACI,8BACMF,GACE,4BACIG,QAAS,kBACLF,EAAkB,MAF1B,UASHD,GAAmB,4BAAQG,QAAS,kBAAMD,MAAvB,WACnBF,GACG,8BACI,kBAAC,IAAD,CAAMI,GAAG,KAAT,QADJ,OAEI,kBAAC,IAAD,CAAMA,GAAG,YAAT,c,OCALC,EApBC,WAAO,IAAD,EACQR,IAAlBS,EADU,EACVA,QAASC,EADC,EACDA,KAEjB,OAAID,IAAYC,EAER,2CAKJ,kBAAC,WAAD,KACI,yBAAKC,IAAKD,EAAKE,QAASC,IAAI,YAE5B,4BAAKH,EAAKI,MACV,2BAAIJ,EAAKK,OACT,8BAAOC,KAAKC,UAAUP,EAAM,KAAM,MCM/BQ,EApBM,SAAC,GAA6C,IAAhCC,EAA+B,EAA1CC,UAAsBC,EAAoB,EAApBA,KAASC,EAAW,sCACNtB,IAAhDS,EADsD,EACtDA,QAASN,EAD6C,EAC7CA,gBAAiBC,EAD4B,EAC5BA,kBAElCmB,qBAAU,WACFd,GAAWN,GAGP,uCAAG,sBAAAqB,EAAA,sEACDpB,EAAkB,CACpBqB,SAAU,CAAEC,UAAWL,KAFpB,2CAAH,oDAKRM,KACD,CAAClB,EAASN,EAAiBC,EAAmBiB,IAIjD,OAAO,kBAAC,IAAD,eAAOA,KAAMA,EAAMO,OAFX,SAAAC,GAAK,OAAwB,IAApB1B,EAA2B,kBAACgB,EAAcU,GAAY,OAEhCP,KCWnCQ,MAzBf,WAGE,OAFoB9B,IAAZS,QAIJ,2CAKF,yBAAKsB,UAAU,OAEb,kBAAC,IAAD,KACE,gCACE,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOV,KAAK,IAAIW,OAAK,IACrB,kBAAC,EAAD,CAAcX,KAAK,WAAWD,UAAWZ,QCb/ByB,QACW,cAA7B3C,OAAOK,SAASuC,UAEe,UAA7B5C,OAAOK,SAASuC,UAEhB5C,OAAOK,SAASuC,SAASC,MACvB,2D,YCCNC,IAASR,OACL,mBNZyB,SAAC,GAIvB,IAHHS,EAGE,EAHFA,SAGE,IAFFC,0BAEE,MAFmBjD,EAEnB,EADCkD,EACD,mDAC4CC,qBAD5C,mBACKrC,EADL,KACsBsC,EADtB,OAEsBD,qBAFtB,mBAEK9B,EAFL,KAEWgC,EAFX,OAG8BF,qBAH9B,mBAGKG,EAHL,KAGkBC,EAHlB,OAI4BJ,oBAAS,GAJrC,mBAIK/B,EAJL,KAIcoC,EAJd,OAKgCL,oBAAS,GALzC,mBAKKM,EALL,KAKgBC,EALhB,KAOFxB,qBAAU,YACS,uCAAG,oCAAAC,EAAA,sEACcwB,IAAkBT,GADhC,UACRU,EADQ,OAEdL,EAASK,IAEL3D,OAAOK,SAASuD,OAAOC,SAAS,SAJtB,iCAKiBF,EAAcG,yBAL/B,gBAKF3B,EALE,EAKFA,SACRa,EAAmBb,GANT,yBASgBwB,EAAc9C,kBAT9B,WASRA,EATQ,OAWdsC,EAAmBtC,IAEfA,EAbU,kCAcS8C,EAAcI,UAdvB,QAcJ3C,EAdI,OAeVgC,EAAQhC,GAfE,QAkBdmC,GAAW,GAlBG,4CAAH,qDAoBfS,KAED,IAEH,IAAMC,EAAc,uCAAG,0CAAA/B,EAAA,6DAAOgC,EAAP,+BAAgB,GACnCT,GAAa,GADM,kBAGTJ,EAAYY,eAAeC,GAHlB,uDAKfC,QAAQC,MAAR,MALe,yBAOfX,GAAa,GAPE,sCASAJ,EAAYU,UATZ,QASb3C,EATa,OAUnBgC,EAAQhC,GACR+B,GAAmB,GAXA,+DAAH,qDAcdW,EAAsB,uCAAG,4BAAA5B,EAAA,6DAC3BqB,GAAW,GADgB,SAErBF,EAAYS,yBAFS,uBAGRT,EAAYU,UAHJ,OAGrB3C,EAHqB,OAI3BmC,GAAW,GACXJ,GAAmB,GACnBC,EAAQhC,GANmB,2CAAH,qDAQ5B,OACI,kBAACb,EAAa8D,SAAd,CACIC,MAAO,CACHzD,kBACAO,OACAD,UACAqC,YACAS,iBACAH,yBACAS,iBAAkB,kBAAUlB,EAAYkB,iBAAZ,MAAAlB,EAAW,YACvCvC,kBAAmB,kBAAUuC,EAAYvC,kBAAZ,MAAAuC,EAAW,YACxCmB,iBAAkB,kBAAUnB,EAAYmB,iBAAZ,MAAAnB,EAAW,YACvCoB,kBAAmB,kBAAUpB,EAAYoB,kBAAZ,MAAApB,EAAW,YACxCtC,OAAQ,kBAAUsC,EAAYtC,OAAZ,MAAAsC,EAAW,cAGhCN,KM9DT,CACI2B,OAAQC,EAAOD,OACfE,UAAWD,EAAOE,SAClBC,aAAc9E,OAAOK,SAAS0E,OAC9B/B,mBAfmB,SAAAb,GACvBnC,OAAOC,QAAQC,aACX,GACAC,SAASC,MACT+B,GAAYA,EAASC,UACfD,EAASC,UACTpC,OAAOK,SAASC,YAWtB,kBAAC,EAAD,OAEJH,SAAS6E,eAAe,SDqGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a8cd9485.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = () =>\r\n    window.history.replaceState({}, document.title, window.location.pathname);\r\n\r\nexport const Auth0Context = React.createContext();\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n    children,\r\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n    ...initOptions\r\n}) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState();\r\n    const [user, setUser] = useState();\r\n    const [auth0Client, setAuth0] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const initAuth0 = async () => {\r\n            const auth0FromHook = await createAuth0Client(initOptions);\r\n            setAuth0(auth0FromHook);\r\n\r\n            if (window.location.search.includes(\"code=\")) {\r\n                const { appState } = await auth0FromHook.handleRedirectCallback();\r\n                onRedirectCallback(appState);\r\n            }\r\n\r\n            const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n\r\n            setIsAuthenticated(isAuthenticated);\r\n\r\n            if (isAuthenticated) {\r\n                const user = await auth0FromHook.getUser();\r\n                setUser(user);\r\n            }\r\n\r\n            setLoading(false);\r\n        };\r\n        initAuth0();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const loginWithPopup = async (params = {}) => {\r\n        setPopupOpen(true);\r\n        try {\r\n            await auth0Client.loginWithPopup(params);\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setPopupOpen(false);\r\n        }\r\n        const user = await auth0Client.getUser();\r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n    };\r\n\r\n    const handleRedirectCallback = async () => {\r\n        setLoading(true);\r\n        await auth0Client.handleRedirectCallback();\r\n        const user = await auth0Client.getUser();\r\n        setLoading(false);\r\n        setIsAuthenticated(true);\r\n        setUser(user);\r\n    };\r\n    return (\r\n        <Auth0Context.Provider\r\n            value={{\r\n                isAuthenticated,\r\n                user,\r\n                loading,\r\n                popupOpen,\r\n                loginWithPopup,\r\n                handleRedirectCallback,\r\n                getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n                loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n                getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n                getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n                logout: (...p) => auth0Client.logout(...p)\r\n            }}\r\n        >\r\n            {children}\r\n        </Auth0Context.Provider>\r\n    );\r\n};","import React from \"react\";\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\r\n\r\n    return (\r\n        <div>\r\n            {!isAuthenticated && (\r\n                <button\r\n                    onClick={() =>\r\n                        loginWithRedirect({})\r\n                    }\r\n                >\r\n                    Log in\r\n        </button>\r\n            )}\r\n\r\n            {isAuthenticated && <button onClick={() => logout()}>Log out</button>}\r\n            {isAuthenticated && (\r\n                <span>\r\n                    <Link to=\"/\">Home</Link>&nbsp;\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                </span>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React, { Fragment } from \"react\";\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\n\r\nconst Profile = () => {\r\n    const { loading, user } = useAuth0();\r\n\r\n    if (loading || !user) {\r\n        return (\r\n            <div>Loading...</div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <img src={user.picture} alt=\"Profile\" />\r\n\r\n            <h2>{user.name}</h2>\r\n            <p>{user.email}</p>\r\n            <code>{JSON.stringify(user, null, 2)}</code>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, { useEffect } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\n\r\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\r\n    const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\r\n\r\n    useEffect(() => {\r\n        if (loading || isAuthenticated) {\r\n            return;\r\n        }\r\n        const fn = async () => {\r\n            await loginWithRedirect({\r\n                appState: { targetUrl: path }\r\n            });\r\n        };\r\n        fn();\r\n    }, [loading, isAuthenticated, loginWithRedirect, path]);\r\n\r\n    const render = props => isAuthenticated === true ? <Component {...props} /> : null;\r\n\r\n    return <Route path={path} render={render} {...rest} />;\r\n};\r\n\r\nexport default PrivateRoute;","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/Profile\";\nimport PrivateRoute from \"./components/PrivateRoute\";\n\nfunction App() {\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {/* New - use BrowserRouter to provide access to /profile */}\n      <BrowserRouter>\n        <header>\n          <NavBar />\n        </header>\n        <Switch>\n          <Route path=\"/\" exact />\n          <PrivateRoute path=\"/profile\" component={Profile} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n    window.history.replaceState(\n        {},\n        document.title,\n        appState && appState.targetUrl\n            ? appState.targetUrl\n            : window.location.pathname\n    );\n};\n\nReactDOM.render(\n    <Auth0Provider\n        domain={config.domain}\n        client_id={config.clientId}\n        redirect_uri={window.location.origin}\n        onRedirectCallback={onRedirectCallback}\n    >\n        <App />\n    </Auth0Provider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}